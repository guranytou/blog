<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on しゅがーぽっと</title><link>https://guranytou.github.io/blog/tags/go/</link><description>Recent content in Go on しゅがーぽっと</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 23 May 2022 09:55:46 +0900</lastBuildDate><atom:link href="https://guranytou.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Pulumiを利用してAWS上でWebサーバ一式を立ててみた その１</title><link>https://guranytou.github.io/blog/post/20220523-create-aws-resource-use-pulumi-1/</link><pubDate>Mon, 23 May 2022 09:55:46 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220523-create-aws-resource-use-pulumi-1/</guid><description>はじめに 普段はTerraformを利用していますが、PulumiだったりSDKだったり、汎用言語を使ってAWSリソースを作ってみたかったのでやってみました。
言語は現在勉強しているGoを使いました。
Pulumiを導入してみる Macで開発しているのでbrew installしました。
brew install pulumi チュートリアル https://www.pulumi.com/docs/get-started/aws/
このページにチュートリアルがあるのでこのガイドに従ってやっていきました（内容は割愛します）
試し書き チュートリアルでS3バケットを作ることができました。
ということで、試しに公式Docを読みながらVPCを1つ作成してみます。
コードを準備する package main import ( &amp;#34;github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2&amp;#34; &amp;#34;github.com/pulumi/pulumi/sdk/v3/go/pulumi&amp;#34; ) func main() { pulumi.Run(func(ctx *pulumi.Context) error { vpc, err := ec2.NewVpc(ctx, &amp;#34;example_vpc&amp;#34;, &amp;amp;ec2.VpcArgs{ CidrBlock: pulumi.String(&amp;#34;10.100.0.0/16&amp;#34;), Tags: pulumi.StringMap{ &amp;#34;Name&amp;#34;: pulumi.String(&amp;#34;example_vpc&amp;#34;), }, }) if err != nil { return err } ctx.Export(&amp;#34;vpcid: &amp;#34;, vpc.ID()) return nil }) } pulumi previewで見てみる
pulumi previewを実行し、作成できるか確認してみます。 &amp;gt; pulumi preview Previewing update (dev) View Live: https://app.</description></item><item><title>天気予報CLIを作るついでに色々勉強した話</title><link>https://guranytou.github.io/blog/post/20220110-create-tenki-cli/</link><pubDate>Mon, 10 Jan 2022 17:00:20 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220110-create-tenki-cli/</guid><description>はじめに 外部APIを利用してCLI作りをしたいなあと思い、天気予報を確認できるCLIを作ることにしました。
$ tenki tokyo,jp 時刻: 2022-01-10 17:14:44 +0900 JST 場所: Tokyo 天気: くもり 気温: 8.1 コードの解説 本体のコードはこちら: Github
Weather MAP APIを利用する APIのtokenを環境変数に格納する Githubに上げるにあたり、tokenは環境変数にしたいなと思いました。
なので、godotenvを利用して.envに格納したtokenを呼び出しています。
err := godotenv.Load(&amp;#34;.env&amp;#34;) if err != nil { panic(&amp;#34;Error loading .env file&amp;#34;) } token := os.Getenv(&amp;#34;API_TOKEN&amp;#34;) API_TOKEN=YOUR_TOKEN 都市情報の設定とWeather MAP APIへクエリを投げる 今回のCLIでは tenki tokyo,jpのように都市名をコマンドで投げるとその都市の天気予報が見れるように、またtenkiのみで投げた場合には東京の天気を見れるようにしたいと思いました。
そのためWeather MAP APIに天気予報を確認したい都市を投げるために、以下のようにしました。
values := url.Values{} values.Set(&amp;#34;APPID&amp;#34;, token) if city == &amp;#34;&amp;#34; { values.Set(&amp;#34;q&amp;#34;, &amp;#34;tokyo,jp&amp;#34;) } else { values.Set(&amp;#34;q&amp;#34;, city) } そして以下のように整形し、Weather MAP APIを投げています。</description></item><item><title>簡易なおみくじができるCLIを作った</title><link>https://guranytou.github.io/blog/post/20211117-create-omikuji/</link><pubDate>Wed, 17 Nov 2021 00:35:15 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211117-create-omikuji/</guid><description>前書き Goの勉強をするのにスナック感覚でCLIを作ろうその１として、よくあるおみくじCLIを作りました。
math/randのお勉強も兼ねてます。
書いたコード 置き場所 https://github.com/guranytou/GoStudy/tree/master/omikuji
コード package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/urfave/cli/v2&amp;#34; ) func main() { app := cli.NewApp() app.Name = &amp;#34;omikuji&amp;#34; app.Usage = &amp;#34;Play omikuji&amp;#34; app.Version = &amp;#34;0.0.1&amp;#34; app.Action = func(c *cli.Context) error { omikuji() return nil } err := app.Run(os.Args) if err != nil { log.Fatal(err) } } func omikuji() { rand.Seed(time.Now().UnixNano()) luck := rand.Intn(12) switch luck { case 0: fmt.Println(&amp;#34;大吉&amp;#34;) case 1, 2: fmt.</description></item><item><title>urfave/cliのチュートリアルをやってみた</title><link>https://guranytou.github.io/blog/post/20211116urfave-cli-tutorial/</link><pubDate>Tue, 16 Nov 2021 00:05:27 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211116urfave-cli-tutorial/</guid><description>前書き Goの勉強をするのにCLIをいくつか作りたくて、urfave/cliのチュートリアルをサクッとやりました。
リッチなCLIを作りたいのであればcobraがいいんでしょうが、今回を含めていくつかのCLIはスナック感覚で作りたかったのでurfave/cliを選定しました。
書いたコード https://github.com/guranytou/GoStudy/tree/master/greet 雑に勉強する用リポジトリにテキトーにサクッと投げた図。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/urfave/cli/v2&amp;#34; ) func main() { app := cli.NewApp() app.Name = &amp;#34;greet&amp;#34; app.Usage = &amp;#34;Give a goo greeting.&amp;#34; app.Version = &amp;#34;0.0.1&amp;#34; app.Action = func(c *cli.Context) error { fmt.Println(&amp;#34;Hello&amp;#34;) return nil } err := app.Run(os.Args) if err != nil { log.Fatal(err) } } 動作確認 まずはそもそも問題なく動くのか確認。 $ go run main.go Hello 作成したコマンドをインストールする $ go install 実行してみる $ greet Hello まとめとか サクッと作れました。以下のコマンドをサクッと作ってみてGoに慣れていこうかなあと思ってます。</description></item></channel></rss>