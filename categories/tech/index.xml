<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on しゅがーぽっと</title><link>https://guranytou.github.io/blog/categories/tech/</link><description>Recent content in tech on しゅがーぽっと</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 10 Jan 2022 17:00:20 +0900</lastBuildDate><atom:link href="https://guranytou.github.io/blog/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>天気予報CLIを作るついでに色々勉強した話</title><link>https://guranytou.github.io/blog/post/20220110-create-tenki-cli/</link><pubDate>Mon, 10 Jan 2022 17:00:20 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220110-create-tenki-cli/</guid><description>はじめに 外部APIを利用してCLI作りをしたいなあと思い、天気予報を確認できるCLIを作ることにしました。
$ tenki tokyo,jp 時刻: 2022-01-10 17:14:44 +0900 JST 場所: Tokyo 天気: くもり 気温: 8.1 コードの解説 本体のコードはこちら: Github
Weather MAP APIを利用する APIのtokenを環境変数に格納する Githubに上げるにあたり、tokenは環境変数にしたいなと思いました。
なので、godotenvを利用して.envに格納したtokenを呼び出しています。
err := godotenv.Load(&amp;#34;.env&amp;#34;) if err != nil { panic(&amp;#34;Error loading .env file&amp;#34;) } token := os.Getenv(&amp;#34;API_TOKEN&amp;#34;) API_TOKEN=YOUR_TOKEN 都市情報の設定とWeather MAP APIへクエリを投げる 今回のCLIでは tenki tokyo,jpのように都市名をコマンドで投げるとその都市の天気予報が見れるように、またtenkiのみで投げた場合には東京の天気を見れるようにしたいと思いました。
そのためWeather MAP APIに天気予報を確認したい都市を投げるために、以下のようにしました。
values := url.Values{} values.Set(&amp;#34;APPID&amp;#34;, token) if city == &amp;#34;&amp;#34; { values.Set(&amp;#34;q&amp;#34;, &amp;#34;tokyo,jp&amp;#34;) } else { values.Set(&amp;#34;q&amp;#34;, city) } そして以下のように整形し、Weather MAP APIを投げています。</description></item><item><title>Github Actionsで職務経歴書.mdをPDFに変換するようにした話</title><link>https://guranytou.github.io/blog/post/20220102-actions-md-to-pdf/</link><pubDate>Sun, 02 Jan 2022 17:27:08 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220102-actions-md-to-pdf/</guid><description>前書き 職務経歴書がだいぶ古くなっていたので、最新化ついでにGithub Pages化とPDF化すればいいじゃんと思い、.mdで作成しました。
Github Pages化はこのブログ用のGithub Actionsを利用してできるようにしたので、今回はPDF化するactionを作ることにしました。
コード name: md-to-pdf on: push: branches: - main paths: - &amp;quot;content/resume.md&amp;quot; jobs: build: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v2 with: node-version: '14' - run: | sudo apt install fonts-noto npm install npm i -g md-to-pdf md-to-pdf content/resume.md - uses: actions/upload-artifact@v2 with: name: resume path: content/resume.pdf 軽い解説 on: push: branches: - main paths: - &amp;quot;content/resume.md&amp;quot; mainブランチにてresume.mdがpushされた時のみ動くようにしました。
- uses: actions/setup-node@v2 with: node-version: '14' 今回はmd-to-pdfを利用してPDF化したかったので、動作に必要なnode.</description></item><item><title>簡易なおみくじができるCLIを作った</title><link>https://guranytou.github.io/blog/post/20211117-create-omikuji/</link><pubDate>Wed, 17 Nov 2021 00:35:15 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211117-create-omikuji/</guid><description>前書き Goの勉強をするのにスナック感覚でCLIを作ろうその１として、よくあるおみくじCLIを作りました。
math/randのお勉強も兼ねてます。
書いたコード 置き場所 https://github.com/guranytou/GoStudy/tree/master/omikuji
コード package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/urfave/cli/v2&amp;#34; ) func main() { app := cli.NewApp() app.Name = &amp;#34;omikuji&amp;#34; app.Usage = &amp;#34;Play omikuji&amp;#34; app.Version = &amp;#34;0.0.1&amp;#34; app.Action = func(c *cli.Context) error { omikuji() return nil } err := app.Run(os.Args) if err != nil { log.Fatal(err) } } func omikuji() { rand.Seed(time.Now().UnixNano()) luck := rand.Intn(12) switch luck { case 0: fmt.Println(&amp;#34;大吉&amp;#34;) case 1, 2: fmt.</description></item><item><title>urfave/cliのチュートリアルをやってみた</title><link>https://guranytou.github.io/blog/post/20211116urfave-cli-tutorial/</link><pubDate>Tue, 16 Nov 2021 00:05:27 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211116urfave-cli-tutorial/</guid><description>前書き Goの勉強をするのにCLIをいくつか作りたくて、urfave/cliのチュートリアルをサクッとやりました。
リッチなCLIを作りたいのであればcobraがいいんでしょうが、今回を含めていくつかのCLIはスナック感覚で作りたかったのでurfave/cliを選定しました。
書いたコード https://github.com/guranytou/GoStudy/tree/master/greet 雑に勉強する用リポジトリにテキトーにサクッと投げた図。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/urfave/cli/v2&amp;#34; ) func main() { app := cli.NewApp() app.Name = &amp;#34;greet&amp;#34; app.Usage = &amp;#34;Give a goo greeting.&amp;#34; app.Version = &amp;#34;0.0.1&amp;#34; app.Action = func(c *cli.Context) error { fmt.Println(&amp;#34;Hello&amp;#34;) return nil } err := app.Run(os.Args) if err != nil { log.Fatal(err) } } 動作確認 まずはそもそも問題なく動くのか確認。 $ go run main.go Hello 作成したコマンドをインストールする $ go install 実行してみる $ greet Hello まとめとか サクッと作れました。以下のコマンドをサクッと作ってみてGoに慣れていこうかなあと思ってます。</description></item><item><title>gitのサブアカウント設定方法作成</title><link>https://guranytou.github.io/blog/post/20211025-git-sub-account/</link><pubDate>Tue, 26 Oct 2021 00:56:23 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211025-git-sub-account/</guid><description>前書き 同じPC上で複数のgitアカウントを利用したくなったので、個人的に良さそうなアカウントの切り替え方法についてメモします。
やり方 サブ用ディレクトリを作成する サブ用ディレクトリの中に.sshを作成し、鍵を生成する サブ用のgit configを作成し、設定を投入する。 # サブ用のgit configを作成 touch ~/.gitconfig_sub # 設定を投入する [user] name = [your_user_name] email = [your_email_address] ~/.gitconfigに設定を投入する [includeIf &amp;quot;gitdir:~/your/sub/dir/&amp;quot;] path = ~/.gitconfig_sub ~/.ssh/configに設定を投入する Host github github.com HostName github.com IdentityFile ~/your/sub/dir/.ssh/id_rsa User git</description></item><item><title>Hugo + Github Pages + Github Actionsでブログを作った</title><link>https://guranytou.github.io/blog/post/20210916-create-blogs/</link><pubDate>Thu, 16 Sep 2021 22:49:02 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20210916-create-blogs/</guid><description>まえがき Zenn.devに書くほどではないけど、自分では備忘録的なものが欲しくてブログを作った。
そして作ってからn週間経ってようやく記事を書くのであった…。
環境 Windows10 WSL2（Ubuntu20.04） やったこと ざっくりとやったことをメモ。
Hugoの導入 公式から最新版をインストールする。
wget https://github.com/gohugoio/hugo/releases/download/v0.88.0/hugo_extended_0.88.0_Linux-64bit.deb sudo apt-get install ./hugo_extended_0.88.0_Linux-64bit.deb Hugoの設定 まずはサイトを新規作成する。
hugo new site blog 次に好きなthemesを探してダウンロードする。
シンプルなデザインがよかったので、hugo-paperを選択した。
themesリポジトリ：https://github.com/nanxiaobei/hugo-paper
git submodule add https://github.com/nanxiaobei/hugo-paper themes/paper あとはconfig.tomlを設定する（設定内容はthemesリポジトリを参考）。
Github Actionsの設定 記事をpushしたら自動的にGithub Pagesに上げてほしかったので、Github Actionsを設定。 Hugo公式にyamlの書き方があるのでこれを参考にした。
感想 途中何故かHugoのthemesがローカルでもGithub上でも反映されなくて困った。
いろいろいじってたら反映されたけど、理由は不明のまま。。。</description></item></channel></rss>