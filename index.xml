<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>しゅがーぽっと</title><link>https://guranytou.github.io/blog/</link><description>Recent content on しゅがーぽっと</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 10 Sep 2023 15:39:48 +0900</lastBuildDate><atom:link href="https://guranytou.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Goでシーザー暗号を実装してみた</title><link>https://guranytou.github.io/blog/post/20230910-create-caesar-cipher/</link><pubDate>Sun, 10 Sep 2023 15:39:48 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20230910-create-caesar-cipher/</guid><description>まえがき RFCを見ながらMD5を実装しようかなと思ったけど、その前にGoでシーザー暗号を実装してみようかなと思ってやってみた記事です。
コード package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;time&amp;#34; ) func main() { scanner := bufio.NewScanner(os.Stdin) fmt.Print(&amp;#34;文字列を入力してください: &amp;#34;) scanner.Scan() str := scanner.Text() s := rand.NewSource(time.Now().UnixNano()) r := rand.New(s) n := byte(r.Intn(25)) convert := caesar_cipher(str, n) fmt.Println(str, &amp;#34;を&amp;#34;, n, &amp;#34;文字ずらすと&amp;#34;, convert) } func caesar_cipher(str string, n byte) string { convert := make([]string, len(str)) for i := 0; i &amp;lt; len(str); i++ { var b byte if str[i] &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; str[i] &amp;lt;= &amp;#39;Z&amp;#39; { if str[i]+n &amp;gt; &amp;#39;Z&amp;#39; { b = &amp;#39;A&amp;#39; + (str[i] + n - &amp;#39;Z&amp;#39;) - 1 } else { b = str[i] + n } } else if str[i] &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; str[i] &amp;lt;= &amp;#39;z&amp;#39; { if str[i]+n &amp;gt; &amp;#39;z&amp;#39; { b = &amp;#39;a&amp;#39; + (str[i] + n - &amp;#39;z&amp;#39;) - 1 } else { b = str[i] + n } } else { b = str[i] } convert[i] = string(b) } return strings.</description></item><item><title>去年の振り返りと今年の目標</title><link>https://guranytou.github.io/blog/post/20230105-summarize/</link><pubDate>Thu, 05 Jan 2023 17:10:00 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20230105-summarize/</guid><description>2021年の年末に書いてたので今年もブログでまとめておこうかなという次第。
2022年の振り返り 2022年の目標の振り返り Goをもっと勉強する 多少書いたり読めるようになった AWS SAAを取得する 優先順位が落ちてしまったので着手せず k8sを少しずつ勉強し始める CKA取得目指して勉強し始めた 思いついた構成をAWSで色々作ってみる 構成は色々作れなかったけど、Pulumi使ってみたりした 記事を10本以上/年 書く 9本書いてた。惜しい 本をもう少し読む 12月から読み始めたので、今年はもっと読みたいなあ 仕事など TerraformとAWSをゴリゴリやれてたけど、色々あって6月で退職&amp;amp;しばらくお休みしてました。
メンタルヘルスに来ると、メンタルより先に身体に来るのでメンタルはめちゃくちゃ元気です。
ありがたいことにとある会社に拾っていただけたので、4/1からまた働いていきます。
技術 Go書いたりk8sの勉強したりしてました。
あとアルゴリズムを知って書けた方が個人的にはいいなーと感じたので、競技プログラミングに挑戦し始めました。
ゲーム FF14で相変わらず零式やってます。あとプテラノドンマウント欲しくてコツコツやり始め、ギャザラーは全ジョブ終わりました。
今年の目標 去年は体調回復のために好きに暮らしていたので、今年は勉学と体力作りを頑張っていきたいな〜と思うなどしています。
技術 次の仕事ではバックエンドエンジニアになるので、まずは仕事の中で一生懸命頑張っていこうと思ってます。
個人としてもう少しやっていきたいのは以下のことかなと。
CKAの取得 インフラ系OSSのコードを読む習慣をつける 人のコードを読む力をつけたい。苦手なので…… その他 本を100冊読む 技術書以外にも小説や新書問わず読んでいきたい 英語学習の習慣を戻す 体調崩した時にその習慣も吹っ飛んでしまったので 雀魂で雀豪になる 筋トレを毎日する&amp;amp;散歩を継続して行って最終的にランニングできるようになる</description></item><item><title>AIZU ONLINE JUDGE ITP1の1_1-Aから1_10-DまでGoで解いた</title><link>https://guranytou.github.io/blog/post/20220829-aoj-itp/</link><pubDate>Fri, 27 May 2022 00:33:09 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220829-aoj-itp/</guid><description>はじめに 「エンジニア、アルゴリズムをサラッとコーディングできた方が良いのでは？」という思考があるので、最近競プロをちょこちょこやっています。
この記事にて、AOJのITPを1_10-Dまで解くといいよと書かれていたので実際にやってみました。
本当は真面目に競技プログラミングに取り組むのであればC++やPythonがいいんだろうな〜と思いつつ、今はまだコーディング力を向上させたいだけなので勉強中のGoで挑戦しました。
ITPのリザルトを見るとGoでやってる人がほぼいないことが分かった&amp;amp;せっかく最後まで取り組んだので、自分が書いたコードをブログに載せることにしました。 もし「もっとこう書いた方がGoっぽいよ！」や「こうした方が計算量やI/O少ないよ！」などありましたら、自分のTwitterか以下のリポジトリまでお願いします。
今回載せたコードのリポジトリ：GitHub
（雑にGoの勉強に使っているコードなのでリポジトリが汚くて申し訳ないです&amp;hellip;&amp;hellip;）
回答例 1_1-A package main import ( &amp;#34;fmt&amp;#34; ) func main() { fmt.Println(&amp;#34;Hello World&amp;#34;) } 1_1-B package main import ( &amp;#34;fmt&amp;#34; ) func main() { var n int fmt.Scanf(&amp;#34;%d&amp;#34;, &amp;amp;n) fmt.Println(n * n * n) } 1_1-C package main import ( &amp;#34;fmt&amp;#34; ) func main() { var a, b int fmt.Scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;a, &amp;amp;b) fmt.Printf(&amp;#34;%d %d\n&amp;#34;, a*b, a*2+b*2) } 1_1-D package main import ( &amp;#34;fmt&amp;#34; ) func main() { var S int fmt.</description></item><item><title>Pulumiを利用してAWS上でWebサーバ一式を立ててみた その２</title><link>https://guranytou.github.io/blog/post/20220527-create-aws-resource-use-pulumi-2/</link><pubDate>Fri, 27 May 2022 00:33:09 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220527-create-aws-resource-use-pulumi-2/</guid><description>前回： Pulumiを利用してAWS上でWebサーバ一式を立ててみた その１
はじめに 今回は実際にALB-EC2でWebサーバを立ててみます。
構成は以前Terraformで作成したものと同じものとします。
今回のソースコード：Github
書いたコードの解説 ネットワーク周りのコードを作成する
VPC、Subnetを作成します。 pulumi.Run(func(ctx *pulumi.Context) error { vpc, err := ec2.NewVpc(ctx, &amp;#34;example_vpc&amp;#34;, &amp;amp;ec2.VpcArgs{ CidrBlock: pulumi.String(&amp;#34;10.100.0.0/16&amp;#34;), Tags: pulumi.StringMap{ &amp;#34;Name&amp;#34;: pulumi.String(&amp;#34;example_vpc&amp;#34;), }, }) if err != nil { return err } pubSub1a, err := ec2.NewSubnet(ctx, &amp;#34;pubSub1a&amp;#34;, &amp;amp;ec2.SubnetArgs{ VpcId: vpc.ID(), CidrBlock: pulumi.String(&amp;#34;10.100.0.0/24&amp;#34;), AvailabilityZone: pulumi.String(&amp;#34;ap-northeast-1a&amp;#34;), Tags: pulumi.StringMap{ &amp;#34;Name&amp;#34;: pulumi.String(&amp;#34;example_public_1a&amp;#34;), }, }) if err != nil { return err } pubSub1c, err := ec2.NewSubnet(ctx, &amp;#34;pubSub1c&amp;#34;, &amp;amp;ec2.SubnetArgs{ VpcId: vpc.</description></item><item><title>Pulumiを利用してAWS上でWebサーバ一式を立ててみた その１</title><link>https://guranytou.github.io/blog/post/20220523-create-aws-resource-use-pulumi-1/</link><pubDate>Mon, 23 May 2022 09:55:46 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220523-create-aws-resource-use-pulumi-1/</guid><description>はじめに 普段はTerraformを利用していますが、PulumiだったりSDKだったり、汎用言語を使ってAWSリソースを作ってみたかったのでやってみました。
言語は現在勉強しているGoを使いました。
Pulumiを導入してみる Macで開発しているのでbrew installしました。
brew install pulumi チュートリアル https://www.pulumi.com/docs/get-started/aws/
このページにチュートリアルがあるのでこのガイドに従ってやっていきました（内容は割愛します）
試し書き チュートリアルでS3バケットを作ることができました。
ということで、試しに公式Docを読みながらVPCを1つ作成してみます。
コードを準備する package main import ( &amp;#34;github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2&amp;#34; &amp;#34;github.com/pulumi/pulumi/sdk/v3/go/pulumi&amp;#34; ) func main() { pulumi.Run(func(ctx *pulumi.Context) error { vpc, err := ec2.NewVpc(ctx, &amp;#34;example_vpc&amp;#34;, &amp;amp;ec2.VpcArgs{ CidrBlock: pulumi.String(&amp;#34;10.100.0.0/16&amp;#34;), Tags: pulumi.StringMap{ &amp;#34;Name&amp;#34;: pulumi.String(&amp;#34;example_vpc&amp;#34;), }, }) if err != nil { return err } ctx.Export(&amp;#34;vpcid: &amp;#34;, vpc.ID()) return nil }) } pulumi previewで見てみる
pulumi previewを実行し、作成できるか確認してみます。 &amp;gt; pulumi preview Previewing update (dev) View Live: https://app.</description></item><item><title>天気予報CLIを作るついでに色々勉強した話</title><link>https://guranytou.github.io/blog/post/20220110-create-tenki-cli/</link><pubDate>Mon, 10 Jan 2022 17:00:20 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220110-create-tenki-cli/</guid><description>はじめに 外部APIを利用してCLI作りをしたいなあと思い、天気予報を確認できるCLIを作ることにしました。
$ tenki tokyo,jp 時刻: 2022-01-10 17:14:44 +0900 JST 場所: Tokyo 天気: くもり 気温: 8.1 コードの解説 本体のコードはこちら: Github
Weather MAP APIを利用する APIのtokenを環境変数に格納する Githubに上げるにあたり、tokenは環境変数にしたいなと思いました。
なので、godotenvを利用して.envに格納したtokenを呼び出しています。
err := godotenv.Load(&amp;#34;.env&amp;#34;) if err != nil { panic(&amp;#34;Error loading .env file&amp;#34;) } token := os.Getenv(&amp;#34;API_TOKEN&amp;#34;) API_TOKEN=YOUR_TOKEN 都市情報の設定とWeather MAP APIへクエリを投げる 今回のCLIでは tenki tokyo,jpのように都市名をコマンドで投げるとその都市の天気予報が見れるように、またtenkiのみで投げた場合には東京の天気を見れるようにしたいと思いました。
そのためWeather MAP APIに天気予報を確認したい都市を投げるために、以下のようにしました。
values := url.Values{} values.Set(&amp;#34;APPID&amp;#34;, token) if city == &amp;#34;&amp;#34; { values.Set(&amp;#34;q&amp;#34;, &amp;#34;tokyo,jp&amp;#34;) } else { values.Set(&amp;#34;q&amp;#34;, city) } そして以下のように整形し、Weather MAP APIを投げています。</description></item><item><title>Github Actionsで職務経歴書.mdをPDFに変換するようにした話</title><link>https://guranytou.github.io/blog/post/20220102-actions-md-to-pdf/</link><pubDate>Sun, 02 Jan 2022 17:27:08 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20220102-actions-md-to-pdf/</guid><description>前書き 職務経歴書がだいぶ古くなっていたので、最新化ついでにGithub Pages化とPDF化すればいいじゃんと思い、.mdで作成しました。
Github Pages化はこのブログ用のGithub Actionsを利用してできるようにしたので、今回はPDF化するactionを作ることにしました。
コード name: md-to-pdf on: push: branches: - main paths: - &amp;quot;content/resume.md&amp;quot; jobs: build: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v2 with: node-version: '14' - run: | sudo apt install fonts-noto npm install npm i -g md-to-pdf md-to-pdf content/resume.md - uses: actions/upload-artifact@v2 with: name: resume path: content/resume.pdf 軽い解説 on: push: branches: - main paths: - &amp;quot;content/resume.md&amp;quot; mainブランチにてresume.mdがpushされた時のみ動くようにしました。
- uses: actions/setup-node@v2 with: node-version: '14' 今回はmd-to-pdfを利用してPDF化したかったので、動作に必要なnode.</description></item><item><title>今年の振り返りと来年の目標とか</title><link>https://guranytou.github.io/blog/post/20211231-summarize/</link><pubDate>Fri, 31 Dec 2021 12:39:34 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211231-summarize/</guid><description>いつもはTwitterでふわっと振り返りと目標を書いてますが、せっかくブログを作ったのでこっちに。
今年の振り返り 仕事など 4月から今いる会社でTerraform&amp;amp;AWSをゴリゴリやってます。
去年に比べてめちゃくちゃAWSとTerraformに詳しくなりました（当社比）。 あと、チームメンバーの影響でTerraformの実際のソースコードを読むようになったので、成長を感じますね。
そしてそれを読むのにGoの勉強をちょこちょこしだしたので、今後も継続して勉強していきたい気持ち。
技術 ^で書いた通り、今年はTerraform&amp;amp;AWSをゴリゴリできたのでよかったかなと。あとGoちょっとと。
その他にもこのブログをHugo&amp;amp;Github Pagesで作成したり、職務経歴書をOSS化したりしました。
アウトプットはZennに4つ、このブログに5つ（この記事含む）。
来年はもう少しアウトプットしたいので、そのネタ作りのためにも色々思いついたものを作りたいなあと思う次第ですね。
あ、あと初めてアドカレ投稿できました。来年も参加したいなあ。
ゲーム 現役の零式挑戦して無事クリアできたのでよかったです。あと1層でオレンジ出せたのでよかった。
暁月の詩人は難しいけどその分やりがいがあってとても楽しいので、平均紫目指して頑張りたいなあと。
あとはP4U2が3月に発売されるので、またちょっとずつできたらいいかな。多分現役の時ほどやらないけど&amp;hellip;。
来年の目標 技術 Goをもっと勉強する とりあえずは思いついた小さいCLIを作っていきます AWS SAAを取得する（暁月リリースされて年内取得できなかったやつ） k8sを少しずつ勉強し始める（まずは青山本から） 思いついた構成をAWSで色々作ってみる 記事を10本以上/年 書く 本をもう少し読む ゲームしすぎで本を読めてないなあと思ったので読む習慣を戻したい気持ち</description></item><item><title>簡易なおみくじができるCLIを作った</title><link>https://guranytou.github.io/blog/post/20211117-create-omikuji/</link><pubDate>Wed, 17 Nov 2021 00:35:15 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211117-create-omikuji/</guid><description>前書き Goの勉強をするのにスナック感覚でCLIを作ろうその１として、よくあるおみくじCLIを作りました。
math/randのお勉強も兼ねてます。
書いたコード 置き場所 https://github.com/guranytou/GoStudy/tree/master/omikuji
コード package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/urfave/cli/v2&amp;#34; ) func main() { app := cli.NewApp() app.Name = &amp;#34;omikuji&amp;#34; app.Usage = &amp;#34;Play omikuji&amp;#34; app.Version = &amp;#34;0.0.1&amp;#34; app.Action = func(c *cli.Context) error { omikuji() return nil } err := app.Run(os.Args) if err != nil { log.Fatal(err) } } func omikuji() { rand.Seed(time.Now().UnixNano()) luck := rand.Intn(12) switch luck { case 0: fmt.Println(&amp;#34;大吉&amp;#34;) case 1, 2: fmt.</description></item><item><title>urfave/cliのチュートリアルをやってみた</title><link>https://guranytou.github.io/blog/post/20211116urfave-cli-tutorial/</link><pubDate>Tue, 16 Nov 2021 00:05:27 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211116urfave-cli-tutorial/</guid><description>前書き Goの勉強をするのにCLIをいくつか作りたくて、urfave/cliのチュートリアルをサクッとやりました。
リッチなCLIを作りたいのであればcobraがいいんでしょうが、今回を含めていくつかのCLIはスナック感覚で作りたかったのでurfave/cliを選定しました。
書いたコード https://github.com/guranytou/GoStudy/tree/master/greet 雑に勉強する用リポジトリにテキトーにサクッと投げた図。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/urfave/cli/v2&amp;#34; ) func main() { app := cli.NewApp() app.Name = &amp;#34;greet&amp;#34; app.Usage = &amp;#34;Give a goo greeting.&amp;#34; app.Version = &amp;#34;0.0.1&amp;#34; app.Action = func(c *cli.Context) error { fmt.Println(&amp;#34;Hello&amp;#34;) return nil } err := app.Run(os.Args) if err != nil { log.Fatal(err) } } 動作確認 まずはそもそも問題なく動くのか確認。 $ go run main.go Hello 作成したコマンドをインストールする $ go install 実行してみる $ greet Hello まとめとか サクッと作れました。以下のコマンドをサクッと作ってみてGoに慣れていこうかなあと思ってます。</description></item><item><title>gitのサブアカウント設定方法作成</title><link>https://guranytou.github.io/blog/post/20211025-git-sub-account/</link><pubDate>Tue, 26 Oct 2021 00:56:23 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20211025-git-sub-account/</guid><description>前書き 同じPC上で複数のgitアカウントを利用したくなったので、個人的に良さそうなアカウントの切り替え方法についてメモします。
やり方 サブ用ディレクトリを作成する サブ用ディレクトリの中に.sshを作成し、鍵を生成する サブ用のgit configを作成し、設定を投入する。 # サブ用のgit configを作成 touch ~/.gitconfig_sub # 設定を投入する [user] name = [your_user_name] email = [your_email_address] ~/.gitconfigに設定を投入する [includeIf &amp;quot;gitdir:~/your/sub/dir/&amp;quot;] path = ~/.gitconfig_sub ~/.ssh/configに設定を投入する Host github github.com HostName github.com IdentityFile ~/your/sub/dir/.ssh/id_rsa User git</description></item><item><title>Hugo + Github Pages + Github Actionsでブログを作った</title><link>https://guranytou.github.io/blog/post/20210916-create-blogs/</link><pubDate>Thu, 16 Sep 2021 22:49:02 +0900</pubDate><guid>https://guranytou.github.io/blog/post/20210916-create-blogs/</guid><description>まえがき Zenn.devに書くほどではないけど、自分では備忘録的なものが欲しくてブログを作った。
そして作ってからn週間経ってようやく記事を書くのであった…。
環境 Windows10 WSL2（Ubuntu20.04） やったこと ざっくりとやったことをメモ。
Hugoの導入 公式から最新版をインストールする。
wget https://github.com/gohugoio/hugo/releases/download/v0.88.0/hugo_extended_0.88.0_Linux-64bit.deb sudo apt-get install ./hugo_extended_0.88.0_Linux-64bit.deb Hugoの設定 まずはサイトを新規作成する。
hugo new site blog 次に好きなthemesを探してダウンロードする。
シンプルなデザインがよかったので、hugo-paperを選択した。
themesリポジトリ：https://github.com/nanxiaobei/hugo-paper
git submodule add https://github.com/nanxiaobei/hugo-paper themes/paper あとはconfig.tomlを設定する（設定内容はthemesリポジトリを参考）。
Github Actionsの設定 記事をpushしたら自動的にGithub Pagesに上げてほしかったので、Github Actionsを設定。 Hugo公式にyamlの書き方があるのでこれを参考にした。
感想 途中何故かHugoのthemesがローカルでもGithub上でも反映されなくて困った。
いろいろいじってたら反映されたけど、理由は不明のまま。。。</description></item><item><title>About</title><link>https://guranytou.github.io/blog/about/</link><pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate><guid>https://guranytou.github.io/blog/about/</guid><description>ぐらにゅの主に技術の話を書くブログです</description></item><item><title/><link>https://guranytou.github.io/blog/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://guranytou.github.io/blog/archives/</guid><description/></item><item><title/><link>https://guranytou.github.io/blog/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guranytou.github.io/blog/resume/</guid><description>職務経歴書 個人データ key value Name 山吹明里（Akari Yamabuki） Github guranytou Blog https://guranytou.github.io/blog/ Zenn https://zenn.dev/guranytou 職務経歴 株式会社Finatext(2023年4月 - 現在) パートナー企業向け証券サービスのサーバサイド開発(2023年4月 - 2023年12月) 職種: サーバサイドエンジニア 役割: メンバー チーム: 8人 技術スタック: AWS、Go、Terraform、Github 詳細: 協業しているパートナー企業向けに証券サービスを提供するプラットフォームの開発に従事。 パートナー企業担当者や社内CS担当者向けが利用する、証券サービス利用者への一括メール送信機能の開発 法人利用者向けの譲渡益税計算用データ提供機能の開発 新規パートナー企業に提供するサービス一式の構築 各種証券サービスの開発環境改善・インフラ改善(2024年1月 - 現在) 職種: SRE 役割: メンバー チーム: 3人 技術スタック: AWS、Go、Terraform、Github 詳細: 証券サービス全体で利用するプラットフォームの開発環境・インフラの改善や各種パートナー向けサービスのインフラ周りの改善に従事。 複数あったTerraformリポジトリの統合および必要なmoduleの共通化とマルチクラウド対応 AWSやGoの各種EOL対応 Terraformリポジトリの各種整備 共通moduleの設計・開発・展開 moduleの自動ドキュメント化 静的解析ツールの調査検討 株式会社クラフトマンソフトウェア（2021年4月 - 2022年6月） 某自動車関係企業の開発環境の開発及び運用 職種：インフラエンジニア 役割：サブリーダー チーム： 4人 技術スタック: AWS（VPC/IAM/EC2/RDS/ELB/Route53/ACM）、Terraform、Gitlab 詳細</description></item></channel></rss>